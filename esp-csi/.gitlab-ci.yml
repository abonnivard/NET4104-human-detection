stages:
  - build
  - deploy

variables:
  BATCH_BUILD: "1"
  V: "0"
  MAKEFLAGS: "-j8 --no-keep-going"
  IDF_CI_BUILD: "1"

before_script:
  # add gitlab ssh key
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo -n $GITLAB_KEY > ~/.ssh/id_rsa_base64
  - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

.build_all_examples_script: &build_all_examples_script
  - for EXAMPLE in $EXAMPLES; do
  - cd $CI_PROJECT_DIR/examples/$EXAMPLE
  - echo Building $EXAMPLE
  - if [[ "$EXAMPLE" == "console_test" ]]; then
  - for TARGET in $TARGETS; do
  - cd $CI_PROJECT_DIR/examples/$EXAMPLE
  - idf.py fullclean
  - idf.py set-target $TARGET
  - idf.py build
  - done
  - else
  - idf.py fullclean
  - idf.py build
  - fi
  - echo Build Complete for $EXAMPLE
  - done

.build_template:
  stage: build
  tags:
    - build
  variables:
    EXAMPLES: "esp-radar/console_test esp-radar/connect_rainmaker get-started/csi_send get-started/csi_recv get-started/csi_recv_router"
  script:
    - *build_all_examples_script

build_idf_v4.4:
  extends: .build_template
  image: espressif/idf:release-v4.4
  variables:
    TARGETS: "esp32 esp32s3 esp32c3"

build_idf_v5.0:
  extends: .build_template
  image: espressif/idf:release-v5.0
  variables:
    TARGETS: "esp32 esp32s3 esp32c3"

build_idf_v5.1:
  extends: .build_template
  image: espressif/idf:release-v5.1
  variables:
    TARGETS: "esp32 esp32s3 esp32c3"

# build_idf_master:
#   extends: .build_template
#   image: espressif/idf:latest
#   variables:
#     TARGETS: "esp32 esp32s3 esp32c3"

push_master_to_github:
  stage: deploy
  only:
    - master
    - /^release\/v/
#  when: on_success
  image: $CI_DOCKER_REGISTRY/esp32-ci-env
  variables:
    GIT_STRATEGY: clone
    GITHUB_PUSH_REFS: refs/remotes/origin/release refs/remotes/origin/master
    CI_BUILD_REF: $CI_COMMIT_REF  # Add this line to pass CI_BUILD_REF
  before_script:
    - echo "skip default before_script"
  script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GH_PUSH_KEY >> ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git remote add github git@github.com:espressif/esp-csi.git
    # What the next line of script does: goes through the list of refs for all branches we push to github,
    # generates a snippet of shell which is evaluated. The snippet checks CI_BUILD_REF against the SHA
    # (aka objectname) at tip of each branch, and if any SHAs match then it checks out the local branch
    # and then pushes that ref to a corresponding github branch
    #
    # NB: In gitlab 9.x, CI_BUILD_REF was deprecated. New name is CI_COMMIT_REF. If below command suddenly
    # generates bash syntax errors, this is probably why.
    - |
      if [ -n "${CI_COMMIT_TAG}" ]; then
        # for tags
        git push github "${CI_COMMIT_TAG}"
      else
        # for branches
        git push github "${CI_COMMIT_SHA}:refs/heads/${CI_COMMIT_REF_NAME}"
      fi